#!/usr/bin/env python
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: hpe_ilo_api

short_description: This module is used to interact with the iLO API (redfish) of HPE servers.

version_added: "1.0.0"

description: It makes use of the RedFish Python Module, which uses http requests to interact with the iLO API.

options:
    ilo_ip:
        description: The IP address of the iLO interface.
        required: true
        type: str
    ilo_uri:
        description: The iLO URI that redfish will use to interact with.
        required: true
        type: str
    http_request_type:
        description: The type of http request to be made.
        required: true
        type: str
        choices: ['GET', 'PATCH', 'POST']
        # We only cater for ['GET', 'PATCH', 'POST'] requests in this module.
        # later we can look at adding the other request types.
        # i.e. ['PUT', 'DELETE']
    http_request_body:
        description: The body of the http request. It is required for POST, PATCH and PUT requests.
        required: false
        type: dict
        # at the moment we only cater for single level dictionaries.
        # i.e. {'key': 'value'} so a single key with its value.
        # primarily used and tested with PATCHing of the iLO HostName.
        # later we can look at adding support for nested dictionaries / multiple keys, etc.
        # this funcitonality may already be supported by the redfish module, but is not tested at this point.
    search_key:
        description: Specify a search key / attribute to search the response body when using 'GET' in your http_request_type
        required: false
        type: str
    ilo_username:
        description: The username to authenticate with the iLO interface.
        required: true
        type: str
        no_log: true
    ilo_password:
        description: The password to authenticate with the iLO interface.
        required: true
        type: str
        no_log: true
        # we don't want to log the password in the output of the module.

author:
    - John Paulsen (john.paulsen@odido.nl)
'''

EXAMPLES = r'''
- name: Get value of the iLO HostName
  hpe_ilo_api:
    ilo_ip: xxx.xxx.xxx.xxx
    ilo_uri: /redfish/v1/systems/1
    http_request_type: GET
    ilo_username: username
    ilo_password: password
    search_key: HostName

- name: Change the iLO HostName
    hpe_ilo_api:
        ilo_ip: xxx.xxx.xxx.xxx
        ilo_uri: /redfish/v1/systems/1
        http_request_type: PATCH
        http_request_body:
            HostName: newHostName
        ilo_username: username
        ilo_password: password

- name: Enable IPMI/DCMI over LAN
    hpe_ilo_api:
        ilo_ip: xxx.xxx.xxx.xxx
        ilo_uri: /redfish/v1/managers/1/NetworkProtocol
        http_request_type: PATCH
        http_request_body:
            IPMI:
                ProtocolEnabled: true
        ilo_username: username
        ilo_password: password

- name: Reset the iLO
    hpe_ilo_api:
        ilo_ip: xxx.xxx.xxx.xxx
        ilo_uri: /redfish/v1/Managers/1/Actions/Manager.Reset
        http_request_type: POST
        http_request_body:
            ResetType: GracefulRestart
        ilo_username: username
        ilo_password: password
'''

RETURN = r'''
# These are examples of possible return values.
messages:
    description: List of 'INFO' type messages generated by the module.
    type: list
    returned: always
    sample: [
        'Successfully logged into iLO: 'https://xxx.xxx.xxx.xxx/'',
        'Found attribute 'HostName' in response body.',
        'key: 'HostName' => value: 'oldHostName',
        'Successful 'PATCH' request to ilo uri: '/redfish/v1/systems/1' using data key: 'HostName' and value: 'newHostName'
    ]
exceptions:
    description: List of 'ERROR' type messages generated by the module.
    type: list
    returned: always
    sample: [
        'Failed to define redfish object for iLO: 'https://xxx.xxx.xxx.xxx/', refer to exception message below for more details.',
        'Error:\nFailed to login to iLO: 'https://xxx.xxx.xxx.xxx/', please check the username and password',
        'http 'GET' request did not return the expected result.\nhttp response status: '404'\nplease review the response body for more information.\nresponse body:\n{'error': {'@Message.ExtendedInfo': [{'MessageId': 'Base.1.0.ResourceMissing', 'Message': 'The resource of type Manager with the Id 1 was not found.'}]}}'
    ]
'''

# TODO:
# - Change the messages and exceptions params to dictionary params.
#   The Key value should be the name of the method that generated the message or exception.

from ansible.module_utils.basic import AnsibleModule
import redfish

def ilo_login(ilo_ip, ilo_user, ilo_password):
    messages = []
    exceptions = []
    failed = False
    return_dict = {}
    ilo_url = "https://" + ilo_ip + "/"

    try:
        redfish_obj = redfish.redfish_client(base_url=ilo_url, username=ilo_user, password=ilo_password)
    except Exception as e:
        failed = True
        exception_message = "Failed to define redfish object for iLO: '{}', refer to exception message below for more details.".format(ilo_url)
        print(exception_message)
        exceptions.append(exception_message)
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)
    
    try:
        redfish_obj.login(auth="session")
        result_message = "Successfully logged into iLO: '{}'".format(ilo_url)
        print(result_message)
        messages.append(result_message)
    except Exception as e:
        failed = True
        exception_message = "Failed to login to iLO: '{}', please check the username and password".format(ilo_url)
        print(exception_message)
        exceptions.append(exception_message)
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)
    
    if failed:
        exceptions.append('ensure that the iLO IP address, username and password are correct.')
    
    return_dict['messages'] = messages
    return_dict['exceptions'] = exceptions
    return_dict['failed'] = failed
    return_dict['redfish_obj'] = redfish_obj
    
    return return_dict

def ilo_logout(redfish_obj):
    messages = []
    exceptions = []
    failed = False
    return_dict = {}
    try:
        redfish_obj.logout()
        result_message = "Successfully logged out from iLO"
        print(result_message)
        messages.append(result_message)
    except Exception as e:
        failed = True
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)
    
    if failed:
        exceptions.append('FAILED to logout of the iLO interface.')
    
    return_dict['messages'] = messages
    return_dict['exceptions'] = exceptions
    return_dict['failed'] = failed

    return return_dict

def get_http_request(redfish_obj, ilo_uri, http_request, search_key):
    messages = []
    exceptions = []
    failed = False
    return_dict = {}
    try:
        response = redfish_obj.get(ilo_uri)
    except Exception as e:
        failed = True
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)

    if response.status == 200:
        attrib_found = False
        for key, value in response.dict.items():
            if key == search_key:
                attrib_found = True
                result_message = "Found attribute '{}' in response body.".format(search_key)
                print(result_message)
                messages.append(result_message)
                result_message = "key: '{}' => value: '{}'".format(key, value)
                print(result_message)
                messages.append(result_message)
                break
        if not attrib_found:
            result_message = "attribute '{}' not found in response body.".format(search_key)
            print(result_message)
            messages.append(result_message)
    else:
        result_message = "http '{}' request did not return the expected result.".format(http_request)+\
            "http response status: '{}'\n".format(str(response.status))+\
            "please review the response body for more information.\nresponse body:\n"+\
            str(response.dict)
        print(result_message)
        messages.append(result_message)
    
    return_dict['messages'] = messages
    return_dict['exceptions'] = exceptions
    return_dict['failed'] = failed
    
    return return_dict

def patch_http_request(redfish_obj, ilo_uri, http_request, http_body_dict):
    messages = []
    exceptions = []
    failed = False
    return_dict = {}
    try:
        response = redfish_obj.patch(ilo_uri, body=http_body_dict)
    except Exception as e:
        failed = True
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)

    if response.status == 200:
        result_message = "Successful '{}' request to ilo uri: '{}' using data key: '{}' and value: '{}'".format(http_request, ilo_uri, list(http_body_dict.keys())[0], list(http_body_dict.values())[0])+\
            "\nresponse status: '{}'".format(str(response.status))
            # "\nresponse body:\n"+str(response.dict) # if the body contains the word 'error' ansible auto fails this module, even though it was successfully patched.
        print(result_message)
        messages.append(result_message)
    else:
        failed = True
        exception_message = "http '{}' request did not return the expected result.".format(http_request)+\
            "\nhttp response status: '{}'".format(str(response.status))+\
            "\nplease review the response body for more information."+\
            "\nresponse body:\n"+str(response.dict)
        print(exception_message)
        exceptions.append(exception_message)
    
    return_dict['messages'] = messages
    return_dict['exceptions'] = exceptions
    return_dict['failed'] = failed
    
    return return_dict

def post_http_request(redfish_obj, ilo_uri, http_request, http_body_dict):
    messages = []
    exceptions = []
    failed = False
    return_dict = {}
    try:
        response = redfish_obj.post(ilo_uri, body=http_body_dict)
    except Exception as e:
        failed = True
        exception_message = "Error:\n"+str(e)
        print(exception_message)
        exceptions.append(exception_message)
        # exit(1)

    if response.status == 200:
        result_message = "Successful '{}' request to ilo uri: '{}' using data key: '{}' and value: '{}'".format(http_request, ilo_uri, list(http_body_dict.keys())[0], list(http_body_dict.values())[0])+\
            "\nresponse status: '{}'".format(str(response.status))
            # "\nresponse body:\n"+str(response.dict) # if the body contains the word 'error' ansible auto fails this module, even though it was successfully posted.
        print(result_message)
        messages.append(result_message)
    else:
        failed = True
        exception_message = "http '{}' request did not return the expected result.".format(http_request)+\
            "\nhttp response status: '{}'".format(str(response.status))+\
            "\nplease review the response body for more information."+\
            "\nresponse body:\n"+str(response.dict)
        print(exception_message)
        exceptions.append(exception_message)
    
    return_dict['messages'] = messages
    return_dict['exceptions'] = exceptions
    return_dict['failed'] = failed
    
    return return_dict

def run_module():
    module_args = dict(
        ilo_ip=dict(type='str', required=True),
        ilo_uri=dict(type='str', required=True),
        http_request_type=dict(type='str', required=True, choices=['GET', 'PATCH', 'POST']),
        http_request_body=dict(type='dict', required=False),
        search_key=dict(type='str', required=False),
        ilo_username=dict(type='str', required=True, no_log=True),
        ilo_password=dict(type='str', required=True, no_log=True)
    )

    # seed the result dict in the object we primarily care about
    # changed and state changed is if this module effectively modified the target
    # state will include any data that we want this module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        messages=[],
        exceptions=[],
        rc=0
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    result_exceptions = []
    result_messages = []

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)

    # login to the iLO interface
    login_result_dict = ilo_login(module.params['ilo_ip'], module.params['ilo_username'], module.params['ilo_password'])
    redfish_obj = login_result_dict['redfish_obj']
    if len(login_result_dict['exceptions']) > 0:
        result_exceptions.append(login_result_dict['exceptions'])
        result['exceptions'] = result_exceptions
    if len(login_result_dict['messages']) > 0:
        result_messages.append(login_result_dict['messages'])
        result['messages'] = result_messages

    if login_result_dict['failed']:
        result['rc'] = 1
        module.fail_json(msg='failed to login to the iLO interface', **result)

    match module.params['http_request_type']:
        case 'GET':
            result_dict = get_http_request(redfish_obj, module.params['ilo_uri'], module.params['http_request_type'], module.params['search_key'])
            result['changed'] = False
            if len(result_dict['exceptions']) > 0:
                result_exceptions.append(result_dict['exceptions'])
                result['exceptions'] = result_exceptions
            if len(result_dict['messages']) > 0:
                result_messages.append(result_dict['messages'])
                result['messages'] = result_messages

            if result_dict['failed']:
                result['changed'] = False
                result['rc'] = 1
                module.fail_json(msg='failed to get the value of the iLO attribute', **result)

        case 'PATCH':
            result_dict = patch_http_request(redfish_obj, module.params['ilo_uri'], module.params['http_request_type'], module.params['http_request_body'])
            result['changed'] = True
            if len(result_dict['exceptions']) > 0:
                result_exceptions.append(result_dict['exceptions'])
                result['exceptions'] = result_exceptions
            if len(result_dict['messages']) > 0:
                result_messages.append(result_dict['messages'])
                result['messages'] = result_messages

            if result_dict['failed']:
                result['changed'] = False
                result['rc'] = 1
                module.fail_json(msg='failed to {} the iLO attribute'.format(module.params['http_request_type']), **result)

        case 'POST':
            result_dict = post_http_request(redfish_obj, module.params['ilo_uri'], module.params['http_request_type'], module.params['http_request_body'])
            result['changed'] = True
            if len(result_dict['exceptions']) > 0:
                result_exceptions.append(result_dict['exceptions'])
                result['exceptions'] = result_exceptions
            if len(result_dict['messages']) > 0:
                result_messages.append(result_dict['messages'])
                result['messages'] = result_messages

            if result_dict['failed']:
                result['changed'] = False
                result['rc'] = 1
                module.fail_json(msg='failed to {} the iLO attribute'.format(module.params['http_request_type']), **result)
    
    # logout of the iLO interface
    logout_result_dict = ilo_logout(redfish_obj)
    if len(logout_result_dict['exceptions']) > 0:
        result_exceptions.append(logout_result_dict['exceptions'])
        result['exceptions'] = result_exceptions
    if len(logout_result_dict['messages']) > 0:
        result_messages.append(logout_result_dict['messages'])
        result['messages'] = result_messages
    
    if logout_result_dict['failed']:
        result['changed'] = False
        result['rc'] = 1
        module.fail_json(msg='failed to logout of the iLO interface', **result)

    # in the event of a successful module execution gracefully exit, passing the key/value results
    module.exit_json(**result)


def main():
    run_module()

if __name__ == '__main__':
    main()
